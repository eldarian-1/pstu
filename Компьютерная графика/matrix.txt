#include <math.h>
#include <iostream>
#include <valarray>
#include <vector>
using namespace std;

class Matrix {
    vector<vector<double>> _m;
    public:
    Matrix() = default;
    Matrix(vector<vector<double>> m) : _m(m) {}
    Matrix min();
    friend Matrix operator * (Matrix left, Matrix right);
    friend ostream& operator << (ostream& out, Matrix m);
};

int main() {
    Matrix reestr = Matrix({
        {2, 2, 1},
        {5, 7, 1},
        {1, 10, 1},
        {7, 13, 1},
        {11, 10, 1},
        {12, 2, 1},
        {8, 3, 1}
    });
    Matrix oper = Matrix({
        {1./2, -sqrt(3)/2, 0},
        {sqrt(3)/2, 1./2, 0},
        {-1-sqrt(3), sqrt(3) - 1, 1}
    });
    Matrix t = Matrix({
        {1, 0, 0},
        {0, 1, 0},
        {-2, -2, 1}
    });
    double a = M_PI / 180 * 30;
    Matrix r = Matrix({
        {cos(a), sin(a), 0},
        {-sin(a), cos(a), 0},
        {0, 0, 1}
    });
    cout << (reestr * t * r).min();
    return 0;
}

Matrix Matrix::min() {
    Matrix r;
    int n = _m.size(), m = _m[0].size();
    r._m = vector<vector<double>>(n, vector<double>(m, 0.));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            r._m[i][j] = _m[i][j] / _m[i][m - 1];
        }
    }
    return r;
}

Matrix operator * (Matrix left, Matrix right) {
    Matrix r;
    int n = left._m.size(), m = right._m.size();
    r._m = vector<vector<double>>(n, vector<double>(m, 0.));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            for(int k = 0; k < m; k++) {
                r._m[i][j] += left._m[i][k] * right._m[k][j];
            }
        }
    }
    return r;
}

ostream& operator << (ostream& out, Matrix ma) {
    int n = ma._m.size(), m = ma._m[0].size();
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            out << ma._m[i][j] << " ";
        }
        out << "\n";
    }
    return out;
}